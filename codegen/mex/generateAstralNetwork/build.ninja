# CompilerName=gcc
# Mode=optim
ninja_required_version = 1.3

# Basic folders
root = .
builddir = $root/build/glnxa64
matlabdir = /usr/local/MATLAB/R2024a
startdir = /home/bcberg/Documents/astral-mikado

# Toolchain information
cc = /usr/bin/gcc
cxx = g++
linker = /usr/bin/gcc
linkerxx = g++

cflags =  -fexceptions -fPIC -fno-omit-frame-pointer -pthread -fwrapv -D_GNU_SOURCE -DMATLAB_MEX_FILE  -O2 -DNDEBUG -std=c99 -I "$root" -I "$startdir" -I "$root/interface" -I "$matlabdir/extern/include" -I "." -DMODEL=generateAstralNetwork_mex -msse2 -fno-predictive-commoning -c -fopenmp -DOMPLIBNAME="$matlabdir/sys/os/glnxa64/libiomp5.so" 

cxxflags =  -fexceptions -fPIC -fno-omit-frame-pointer -pthread -fwrapv -D_GNU_SOURCE -DMATLAB_MEX_FILE  -O2 -DNDEBUG -std=c++11 -I "$root" -I "$startdir" -I "$root/interface" -I "$matlabdir/extern/include" -I "." -DMODEL=generateAstralNetwork_mex -msse2 -fno-predictive-commoning -c -fopenmp -DOMPLIBNAME="$matlabdir/sys/os/glnxa64/libiomp5.so" 

ldflags =  -pthread -Wl,--no-undefined -Wl,-rpath-link,$matlabdir/bin/glnxa64 -shared  -L"$matlabdir/bin/glnxa64" -lmx -lmex -lmat -lm -lstdc++  -Wl,-Bsymbolic -o generateAstralNetwork_mex.mexa64 -lemlrt -lcovrt -lut -lmwmathutil -fPIC -L"$matlabdir/sys/os/glnxa64" -liomp5 -Wl,--version-script,generateAstralNetwork_mex.map

linkobjs = 

# Build Rules
rule cc
    command = $cc $cflags $in -o $out

rule cxx
    command = $cxx $cxxflags $in -o $out

rule link
    command = $linker $in $linkobjs $ldflags

rule linkxx
    command = $linkerxx $in $linkobjs $ldflags

# Build
build $builddir/generateAstralNetwork_data.o : cc $root/generateAstralNetwork_data.c
build $builddir/rt_nonfinite.o : cc $root/rt_nonfinite.c
build $builddir/generateAstralNetwork_initialize.o : cc $root/generateAstralNetwork_initialize.c
build $builddir/generateAstralNetwork_terminate.o : cc $root/generateAstralNetwork_terminate.c
build $builddir/generateAstralNetwork.o : cc $root/generateAstralNetwork.c
build $builddir/rand.o : cc $root/rand.c
build $builddir/mustBeInteger.o : cc $root/mustBeInteger.c
build $builddir/colon.o : cc $root/colon.c
build $builddir/repmat.o : cc $root/repmat.c
build $builddir/assertValidSizeArg.o : cc $root/assertValidSizeArg.c
build $builddir/sum.o : cc $root/sum.c
build $builddir/mod.o : cc $root/mod.c
build $builddir/indexShapeCheck.o : cc $root/indexShapeCheck.c
build $builddir/warning.o : cc $root/warning.c
build $builddir/_coder_generateAstralNetwork_api.o : cc $root/interface/_coder_generateAstralNetwork_api.c
build $builddir/_coder_generateAstralNetwork_mex.o : cc $root/interface/_coder_generateAstralNetwork_mex.c
build $builddir/eml_int_forloop_overflow_check.o : cc $root/eml_int_forloop_overflow_check.c
build $builddir/sumMatrixIncludeNaN.o : cc $root/sumMatrixIncludeNaN.c
build $builddir/sin.o : cc $root/sin.c
build $builddir/sort.o : cc $root/sort.c
build $builddir/sortIdx.o : cc $root/sortIdx.c
build $builddir/generateAstralNetwork_emxutil.o : cc $root/generateAstralNetwork_emxutil.c
build $builddir/_coder_generateAstralNetwork_info.o : cc $root/interface/_coder_generateAstralNetwork_info.c
build $builddir/c_mexapi_version.o : cc $matlabdir/extern/version/c_mexapi_version.c

# Link
build $root/generateAstralNetwork_mex.mexa64 : link $builddir/generateAstralNetwork_data.o $builddir/rt_nonfinite.o $builddir/generateAstralNetwork_initialize.o $builddir/generateAstralNetwork_terminate.o $builddir/generateAstralNetwork.o $builddir/rand.o $builddir/mustBeInteger.o $builddir/colon.o $builddir/repmat.o $builddir/assertValidSizeArg.o $builddir/sum.o $builddir/mod.o $builddir/indexShapeCheck.o $builddir/warning.o $builddir/_coder_generateAstralNetwork_api.o $builddir/_coder_generateAstralNetwork_mex.o $builddir/eml_int_forloop_overflow_check.o $builddir/sumMatrixIncludeNaN.o $builddir/sin.o $builddir/sort.o $builddir/sortIdx.o $builddir/generateAstralNetwork_emxutil.o $builddir/_coder_generateAstralNetwork_info.o $builddir/c_mexapi_version.o 
